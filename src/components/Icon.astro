---
import type { HTMLAttributes } from "astro/types";
import { iconPaths } from "./IconPaths";

interface Props {
	icon: keyof typeof iconPaths;
	color?: string;
	gradient?: boolean;
	size?: string;
}

const { color = "currentcolor", gradient, icon, size } = Astro.props;
const iconPath = iconPaths[icon];

const attrs: HTMLAttributes<"svg"> = {};
if (size) attrs.style = { "--size": size };

const gradientId =
	"icon-gradient-" + Math.round(Math.random() * 10e12).toString(36);
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	width="40"
	height="40"
	viewBox="0 0 256 256"
	aria-hidden="true"
	stroke={gradient ? `url(#${gradientId})` : color}
	fill={gradient ? `url(#${gradientId})` : color}
	{...attrs}
>
	<svg
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink"
		width="24"
		height="24"
		viewBox="0 0 24 24"
		role="img"
		aria-label="CV"
		class="icon"
	>
		<rect width="24" height="24" fill="none"></rect>
		<path
			d="M12,3c5,0,9,4,9,9s-4,9-9,9s-9-4-9-9S7,3,12,3z M10.5,17h3V8h-3V17z M12,5c-2.21,0-4,1.79-4,4s1.79,4,4,4s4-1.79,4-4	S14.21,5,12,5z"
		></path>
	</svg>

	<g set:html={iconPath} />
	{
		gradient && (
			<linearGradient
				id={gradientId}
				x1="23"
				x2="235"
				y1="43"
				y2="202"
				gradientUnits="userSpaceOnUse"
			>
				<stop stop-color="var(--gradient-stop-1)" />
				<stop offset=".5" stop-color="var(--gradient-stop-2)" />
				<stop offset="1" stop-color="var(--gradient-stop-3)" />
			</linearGradient>
		)
	}
</svg>

<style>
	svg {
		vertical-align: middle;
		width: var(--size, 1em);
		height: var(--size, 1em);
	}
</style>
